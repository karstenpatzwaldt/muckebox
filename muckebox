#!/usr/bin/python
#
# -*- mode: python -*-

import signal
import sys
import os

import cherrypy

from scanner.scanner import Scanner
from server.server import Server
from db import Db
from utils import Settings

class Muckebox(object):
    LOG_TAG = "MUCKEBOX"

    def register_signal_handler(self):
        def handle_signal_sigint(signal, frame):
            cherrypy.log("Caught SIGINT, trying to exit", Muckebox.LOG_TAG)

            if self.scanner:
                self.scanner.stop()

            if self.server:
                self.server.stop()

            sys.exit(0)

        signal.signal(signal.SIGINT, handle_signal_sigint)

    def wait_for_signal(self):
        self.register_signal_handler()

        signal.pause()

    def create_paths(self):
        cache_path = Settings.get_cache_path()
        log_path = Settings.get_log_path()
        
        if not os.path.exists(cache_path):
            os.makedirs(cache_path)

        if not os.path.exists(log_path):
            os.makedirs(log_path)

    def main(self):
        Settings.parse_args()
        
        self.create_paths()

        self.server = Server()
        self.server.configure()

        Db.open(Settings.get_db_path(), Settings.is_verbose())

        if Settings.is_scanner_enabled():
            self.scanner = Scanner(Settings.get_library_path())
            self.scanner.start()
        else:
            self.scanner = False

        if Settings.is_api_enabled():
            self.server.start()
        else:
            self.server = False

        self.wait_for_signal()

if __name__ == "__main__":
    Muckebox().main()

